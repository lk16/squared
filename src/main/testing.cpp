#include "testing.hpp"
#include "bots/bot_ali.hpp"
#include "util/csv.hpp"

#include <future>
#include <vector>
#include <set>
#include <unistd.h>

const bits64 demo_vertical_mirror_table[256] = {
  0x0000000000000000,0x0000000000000080,0x0000000000000040,0x00000000000000c0,
  0x0000000000000020,0x00000000000000a0,0x0000000000000060,0x00000000000000e0,
  0x0000000000000010,0x0000000000000090,0x0000000000000050,0x00000000000000d0,
  0x0000000000000030,0x00000000000000b0,0x0000000000000070,0x00000000000000f0,
  0x0000000000000008,0x0000000000000088,0x0000000000000048,0x00000000000000c8,
  0x0000000000000028,0x00000000000000a8,0x0000000000000068,0x00000000000000e8,
  0x0000000000000018,0x0000000000000098,0x0000000000000058,0x00000000000000d8,
  0x0000000000000038,0x00000000000000b8,0x0000000000000078,0x00000000000000f8,
  0x0000000000000004,0x0000000000000084,0x0000000000000044,0x00000000000000c4,
  0x0000000000000024,0x00000000000000a4,0x0000000000000064,0x00000000000000e4,
  0x0000000000000014,0x0000000000000094,0x0000000000000054,0x00000000000000d4,
  0x0000000000000034,0x00000000000000b4,0x0000000000000074,0x00000000000000f4,
  0x000000000000000c,0x000000000000008c,0x000000000000004c,0x00000000000000cc,
  0x000000000000002c,0x00000000000000ac,0x000000000000006c,0x00000000000000ec,
  0x000000000000001c,0x000000000000009c,0x000000000000005c,0x00000000000000dc,
  0x000000000000003c,0x00000000000000bc,0x000000000000007c,0x00000000000000fc,
  0x0000000000000002,0x0000000000000082,0x0000000000000042,0x00000000000000c2,
  0x0000000000000022,0x00000000000000a2,0x0000000000000062,0x00000000000000e2,
  0x0000000000000012,0x0000000000000092,0x0000000000000052,0x00000000000000d2,
  0x0000000000000032,0x00000000000000b2,0x0000000000000072,0x00000000000000f2,
  0x000000000000000a,0x000000000000008a,0x000000000000004a,0x00000000000000ca,
  0x000000000000002a,0x00000000000000aa,0x000000000000006a,0x00000000000000ea,
  0x000000000000001a,0x000000000000009a,0x000000000000005a,0x00000000000000da,
  0x000000000000003a,0x00000000000000ba,0x000000000000007a,0x00000000000000fa,
  0x0000000000000006,0x0000000000000086,0x0000000000000046,0x00000000000000c6,
  0x0000000000000026,0x00000000000000a6,0x0000000000000066,0x00000000000000e6,
  0x0000000000000016,0x0000000000000096,0x0000000000000056,0x00000000000000d6,
  0x0000000000000036,0x00000000000000b6,0x0000000000000076,0x00000000000000f6,
  0x000000000000000e,0x000000000000008e,0x000000000000004e,0x00000000000000ce,
  0x000000000000002e,0x00000000000000ae,0x000000000000006e,0x00000000000000ee,
  0x000000000000001e,0x000000000000009e,0x000000000000005e,0x00000000000000de,
  0x000000000000003e,0x00000000000000be,0x000000000000007e,0x00000000000000fe,
  0x0000000000000001,0x0000000000000081,0x0000000000000041,0x00000000000000c1,
  0x0000000000000021,0x00000000000000a1,0x0000000000000061,0x00000000000000e1,
  0x0000000000000011,0x0000000000000091,0x0000000000000051,0x00000000000000d1,
  0x0000000000000031,0x00000000000000b1,0x0000000000000071,0x00000000000000f1,
  0x0000000000000009,0x0000000000000089,0x0000000000000049,0x00000000000000c9,
  0x0000000000000029,0x00000000000000a9,0x0000000000000069,0x00000000000000e9,
  0x0000000000000019,0x0000000000000099,0x0000000000000059,0x00000000000000d9,
  0x0000000000000039,0x00000000000000b9,0x0000000000000079,0x00000000000000f9,
  0x0000000000000005,0x0000000000000085,0x0000000000000045,0x00000000000000c5,
  0x0000000000000025,0x00000000000000a5,0x0000000000000065,0x00000000000000e5,
  0x0000000000000015,0x0000000000000095,0x0000000000000055,0x00000000000000d5,
  0x0000000000000035,0x00000000000000b5,0x0000000000000075,0x00000000000000f5,
  0x000000000000000d,0x000000000000008d,0x000000000000004d,0x00000000000000cd,
  0x000000000000002d,0x00000000000000ad,0x000000000000006d,0x00000000000000ed,
  0x000000000000001d,0x000000000000009d,0x000000000000005d,0x00000000000000dd,
  0x000000000000003d,0x00000000000000bd,0x000000000000007d,0x00000000000000fd,
  0x0000000000000003,0x0000000000000083,0x0000000000000043,0x00000000000000c3,
  0x0000000000000023,0x00000000000000a3,0x0000000000000063,0x00000000000000e3,
  0x0000000000000013,0x0000000000000093,0x0000000000000053,0x00000000000000d3,
  0x0000000000000033,0x00000000000000b3,0x0000000000000073,0x00000000000000f3,
  0x000000000000000b,0x000000000000008b,0x000000000000004b,0x00000000000000cb,
  0x000000000000002b,0x00000000000000ab,0x000000000000006b,0x00000000000000eb,
  0x000000000000001b,0x000000000000009b,0x000000000000005b,0x00000000000000db,
  0x000000000000003b,0x00000000000000bb,0x000000000000007b,0x00000000000000fb,
  0x0000000000000007,0x0000000000000087,0x0000000000000047,0x00000000000000c7,
  0x0000000000000027,0x00000000000000a7,0x0000000000000067,0x00000000000000e7,
  0x0000000000000017,0x0000000000000097,0x0000000000000057,0x00000000000000d7,
  0x0000000000000037,0x00000000000000b7,0x0000000000000077,0x00000000000000f7,
  0x000000000000000f,0x000000000000008f,0x000000000000004f,0x00000000000000cf,
  0x000000000000002f,0x00000000000000af,0x000000000000006f,0x00000000000000ef,
  0x000000000000001f,0x000000000000009f,0x000000000000005f,0x00000000000000df,
  0x000000000000003f,0x00000000000000bf,0x000000000000007f,0x00000000000000ff
};

const bits64 demo_rotate_right_table[256] = {
  0x0000000000000000,0x0000000000000080,0x0000000000008000,0x0000000000008080,
  0x0000000000800000,0x0000000000800080,0x0000000000808000,0x0000000000808080,
  0x0000000080000000,0x0000000080000080,0x0000000080008000,0x0000000080008080,
  0x0000000080800000,0x0000000080800080,0x0000000080808000,0x0000000080808080,
  0x0000008000000000,0x0000008000000080,0x0000008000008000,0x0000008000008080,
  0x0000008000800000,0x0000008000800080,0x0000008000808000,0x0000008000808080,
  0x0000008080000000,0x0000008080000080,0x0000008080008000,0x0000008080008080,
  0x0000008080800000,0x0000008080800080,0x0000008080808000,0x0000008080808080,
  0x0000800000000000,0x0000800000000080,0x0000800000008000,0x0000800000008080,
  0x0000800000800000,0x0000800000800080,0x0000800000808000,0x0000800000808080,
  0x0000800080000000,0x0000800080000080,0x0000800080008000,0x0000800080008080,
  0x0000800080800000,0x0000800080800080,0x0000800080808000,0x0000800080808080,
  0x0000808000000000,0x0000808000000080,0x0000808000008000,0x0000808000008080,
  0x0000808000800000,0x0000808000800080,0x0000808000808000,0x0000808000808080,
  0x0000808080000000,0x0000808080000080,0x0000808080008000,0x0000808080008080,
  0x0000808080800000,0x0000808080800080,0x0000808080808000,0x0000808080808080,
  0x0080000000000000,0x0080000000000080,0x0080000000008000,0x0080000000008080,
  0x0080000000800000,0x0080000000800080,0x0080000000808000,0x0080000000808080,
  0x0080000080000000,0x0080000080000080,0x0080000080008000,0x0080000080008080,
  0x0080000080800000,0x0080000080800080,0x0080000080808000,0x0080000080808080,
  0x0080008000000000,0x0080008000000080,0x0080008000008000,0x0080008000008080,
  0x0080008000800000,0x0080008000800080,0x0080008000808000,0x0080008000808080,
  0x0080008080000000,0x0080008080000080,0x0080008080008000,0x0080008080008080,
  0x0080008080800000,0x0080008080800080,0x0080008080808000,0x0080008080808080,
  0x0080800000000000,0x0080800000000080,0x0080800000008000,0x0080800000008080,
  0x0080800000800000,0x0080800000800080,0x0080800000808000,0x0080800000808080,
  0x0080800080000000,0x0080800080000080,0x0080800080008000,0x0080800080008080,
  0x0080800080800000,0x0080800080800080,0x0080800080808000,0x0080800080808080,
  0x0080808000000000,0x0080808000000080,0x0080808000008000,0x0080808000008080,
  0x0080808000800000,0x0080808000800080,0x0080808000808000,0x0080808000808080,
  0x0080808080000000,0x0080808080000080,0x0080808080008000,0x0080808080008080,
  0x0080808080800000,0x0080808080800080,0x0080808080808000,0x0080808080808080,
  0x8000000000000000,0x8000000000000080,0x8000000000008000,0x8000000000008080,
  0x8000000000800000,0x8000000000800080,0x8000000000808000,0x8000000000808080,
  0x8000000080000000,0x8000000080000080,0x8000000080008000,0x8000000080008080,
  0x8000000080800000,0x8000000080800080,0x8000000080808000,0x8000000080808080,
  0x8000008000000000,0x8000008000000080,0x8000008000008000,0x8000008000008080,
  0x8000008000800000,0x8000008000800080,0x8000008000808000,0x8000008000808080,
  0x8000008080000000,0x8000008080000080,0x8000008080008000,0x8000008080008080,
  0x8000008080800000,0x8000008080800080,0x8000008080808000,0x8000008080808080,
  0x8000800000000000,0x8000800000000080,0x8000800000008000,0x8000800000008080,
  0x8000800000800000,0x8000800000800080,0x8000800000808000,0x8000800000808080,
  0x8000800080000000,0x8000800080000080,0x8000800080008000,0x8000800080008080,
  0x8000800080800000,0x8000800080800080,0x8000800080808000,0x8000800080808080,
  0x8000808000000000,0x8000808000000080,0x8000808000008000,0x8000808000008080,
  0x8000808000800000,0x8000808000800080,0x8000808000808000,0x8000808000808080,
  0x8000808080000000,0x8000808080000080,0x8000808080008000,0x8000808080008080,
  0x8000808080800000,0x8000808080800080,0x8000808080808000,0x8000808080808080,
  0x8080000000000000,0x8080000000000080,0x8080000000008000,0x8080000000008080,
  0x8080000000800000,0x8080000000800080,0x8080000000808000,0x8080000000808080,
  0x8080000080000000,0x8080000080000080,0x8080000080008000,0x8080000080008080,
  0x8080000080800000,0x8080000080800080,0x8080000080808000,0x8080000080808080,
  0x8080008000000000,0x8080008000000080,0x8080008000008000,0x8080008000008080,
  0x8080008000800000,0x8080008000800080,0x8080008000808000,0x8080008000808080,
  0x8080008080000000,0x8080008080000080,0x8080008080008000,0x8080008080008080,
  0x8080008080800000,0x8080008080800080,0x8080008080808000,0x8080008080808080,
  0x8080800000000000,0x8080800000000080,0x8080800000008000,0x8080800000008080,
  0x8080800000800000,0x8080800000800080,0x8080800000808000,0x8080800000808080,
  0x8080800080000000,0x8080800080000080,0x8080800080008000,0x8080800080008080,
  0x8080800080800000,0x8080800080800080,0x8080800080808000,0x8080800080808080,
  0x8080808000000000,0x8080808000000080,0x8080808000008000,0x8080808000008080,
  0x8080808000800000,0x8080808000800080,0x8080808000808000,0x8080808000808080,
  0x8080808080000000,0x8080808080000080,0x8080808080008000,0x8080808080008080,
  0x8080808080800000,0x8080808080800080,0x8080808080808000,0x8080808080808080
};

bits64 demo_rotate_left_table[256] = {
  0x0000000000000000,0x0100000000000000,0x0001000000000000,0x0101000000000000,
  0x0000010000000000,0x0100010000000000,0x0001010000000000,0x0101010000000000,
  0x0000000100000000,0x0100000100000000,0x0001000100000000,0x0101000100000000,
  0x0000010100000000,0x0100010100000000,0x0001010100000000,0x0101010100000000,
  0x0000000001000000,0x0100000001000000,0x0001000001000000,0x0101000001000000,
  0x0000010001000000,0x0100010001000000,0x0001010001000000,0x0101010001000000,
  0x0000000101000000,0x0100000101000000,0x0001000101000000,0x0101000101000000,
  0x0000010101000000,0x0100010101000000,0x0001010101000000,0x0101010101000000,
  0x0000000000010000,0x0100000000010000,0x0001000000010000,0x0101000000010000,
  0x0000010000010000,0x0100010000010000,0x0001010000010000,0x0101010000010000,
  0x0000000100010000,0x0100000100010000,0x0001000100010000,0x0101000100010000,
  0x0000010100010000,0x0100010100010000,0x0001010100010000,0x0101010100010000,
  0x0000000001010000,0x0100000001010000,0x0001000001010000,0x0101000001010000,
  0x0000010001010000,0x0100010001010000,0x0001010001010000,0x0101010001010000,
  0x0000000101010000,0x0100000101010000,0x0001000101010000,0x0101000101010000,
  0x0000010101010000,0x0100010101010000,0x0001010101010000,0x0101010101010000,
  0x0000000000000100,0x0100000000000100,0x0001000000000100,0x0101000000000100,
  0x0000010000000100,0x0100010000000100,0x0001010000000100,0x0101010000000100,
  0x0000000100000100,0x0100000100000100,0x0001000100000100,0x0101000100000100,
  0x0000010100000100,0x0100010100000100,0x0001010100000100,0x0101010100000100,
  0x0000000001000100,0x0100000001000100,0x0001000001000100,0x0101000001000100,
  0x0000010001000100,0x0100010001000100,0x0001010001000100,0x0101010001000100,
  0x0000000101000100,0x0100000101000100,0x0001000101000100,0x0101000101000100,
  0x0000010101000100,0x0100010101000100,0x0001010101000100,0x0101010101000100,
  0x0000000000010100,0x0100000000010100,0x0001000000010100,0x0101000000010100,
  0x0000010000010100,0x0100010000010100,0x0001010000010100,0x0101010000010100,
  0x0000000100010100,0x0100000100010100,0x0001000100010100,0x0101000100010100,
  0x0000010100010100,0x0100010100010100,0x0001010100010100,0x0101010100010100,
  0x0000000001010100,0x0100000001010100,0x0001000001010100,0x0101000001010100,
  0x0000010001010100,0x0100010001010100,0x0001010001010100,0x0101010001010100,
  0x0000000101010100,0x0100000101010100,0x0001000101010100,0x0101000101010100,
  0x0000010101010100,0x0100010101010100,0x0001010101010100,0x0101010101010100,
  0x0000000000000001,0x0100000000000001,0x0001000000000001,0x0101000000000001,
  0x0000010000000001,0x0100010000000001,0x0001010000000001,0x0101010000000001,
  0x0000000100000001,0x0100000100000001,0x0001000100000001,0x0101000100000001,
  0x0000010100000001,0x0100010100000001,0x0001010100000001,0x0101010100000001,
  0x0000000001000001,0x0100000001000001,0x0001000001000001,0x0101000001000001,
  0x0000010001000001,0x0100010001000001,0x0001010001000001,0x0101010001000001,
  0x0000000101000001,0x0100000101000001,0x0001000101000001,0x0101000101000001,
  0x0000010101000001,0x0100010101000001,0x0001010101000001,0x0101010101000001,
  0x0000000000010001,0x0100000000010001,0x0001000000010001,0x0101000000010001,
  0x0000010000010001,0x0100010000010001,0x0001010000010001,0x0101010000010001,
  0x0000000100010001,0x0100000100010001,0x0001000100010001,0x0101000100010001,
  0x0000010100010001,0x0100010100010001,0x0001010100010001,0x0101010100010001,
  0x0000000001010001,0x0100000001010001,0x0001000001010001,0x0101000001010001,
  0x0000010001010001,0x0100010001010001,0x0001010001010001,0x0101010001010001,
  0x0000000101010001,0x0100000101010001,0x0001000101010001,0x0101000101010001,
  0x0000010101010001,0x0100010101010001,0x0001010101010001,0x0101010101010001,
  0x0000000000000101,0x0100000000000101,0x0001000000000101,0x0101000000000101,
  0x0000010000000101,0x0100010000000101,0x0001010000000101,0x0101010000000101,
  0x0000000100000101,0x0100000100000101,0x0001000100000101,0x0101000100000101,
  0x0000010100000101,0x0100010100000101,0x0001010100000101,0x0101010100000101,
  0x0000000001000101,0x0100000001000101,0x0001000001000101,0x0101000001000101,
  0x0000010001000101,0x0100010001000101,0x0001010001000101,0x0101010001000101,
  0x0000000101000101,0x0100000101000101,0x0001000101000101,0x0101000101000101,
  0x0000010101000101,0x0100010101000101,0x0001010101000101,0x0101010101000101,
  0x0000000000010101,0x0100000000010101,0x0001000000010101,0x0101000000010101,
  0x0000010000010101,0x0100010000010101,0x0001010000010101,0x0101010000010101,
  0x0000000100010101,0x0100000100010101,0x0001000100010101,0x0101000100010101,
  0x0000010100010101,0x0100010100010101,0x0001010100010101,0x0101010100010101,
  0x0000000001010101,0x0100000001010101,0x0001000001010101,0x0101000001010101,
  0x0000010001010101,0x0100010001010101,0x0001010001010101,0x0101010001010101,
  0x0000000101010101,0x0100000101010101,0x0001000101010101,0x0101000101010101,
  0x0000010101010101,0x0100010101010101,0x0001010101010101,0x0101010101010101
};

void print_time_diff(timeval start,timeval end,int runs,const std::string& name){
  
  double time_diff = (end.tv_sec + (end.tv_usec / 1000000.0)) -
  (start.tv_sec + (start.tv_usec / 1000000.0)); 
  std::cout << name << '\t' << runs << " / " << time_diff; 
  std::cout << " = " << big_number(runs/time_diff) << " per sec avg\n"; 
}


std::set<board> generate_all_boards_at_depth(int depth,board start){
 
  std::set<board> tmp_set,res;
  board* tmp_array = new board[32];
  board* tmp_array_end;
  
  res.insert(start);
  
  for(int d=0;d<depth;d++){
    for(board it: res){
      tmp_array_end = it.get_children(tmp_array);
      tmp_set.insert(tmp_array,tmp_array_end);
    }
    res.swap(tmp_set);
    tmp_set.clear();
  }
  
  delete[] tmp_array;
  return res;
}

board from_move_sequence(std::string in){
  board b;
  b.reset();
  for(int i=0;i<(int)in.size()/2;i++){
    int move = (in[2*i] - 'a') + (8 * (in[(2*i)+1] - '1'));
    b.do_move(move);
  }
  return b;
}

bits64 demo_vertical_mirror_8bit(bits64 b){
  bits64 res = 0ull;
  for(int i=0;i<8;i++){
    if(b & (1ull << i)){
      res |= (1ull << (7-i));
    }
  }
  return res;
}

bits64 demo_rotate_right_8bit(bits64 b){
  bits64 res = 0ull;
  for(int i=0;i<8;i++){
    if(b & (1ull << i)){
      res |= (1ull << (8*i+7));
    }
  }
  return res;
}

bits64 demo_rotate_left_8bit(bits64 b){
  bits64 res = 0ull;
  for(int i=0;i<8;i++){
    if(b & (1ull << i)){
      res |= (1ull << (8*(7-i)));
    }
  }
  return res;
}


board demo_vertical_mirror(const board* b){
  board out;
  out.me = out.opp = 0ull;
  for(int i=0;i<8;i++){
    out.me |= demo_vertical_mirror_table[(b->me >> (8*i)) & 255] << (8*i);
    out.opp |= demo_vertical_mirror_table[(b->opp >> (8*i)) & 255] << (8*i);
  }
  return out;
}

board demo_rotate_right(const board* b){
  board out;
  out.me = out.opp = 0ull;
  for(int i=0;i<8;i++){
    out.me |= demo_rotate_right_table[(b->me >> (8*i)) & 255] >> i;
    out.opp |= demo_rotate_right_table[(b->opp >> (8*i)) & 255] >> i;
  }
  return out;
}

board demo_rotate_left(const board* b){
  board out;
  out.me = out.opp = 0ull;
  for(int i=0;i<8;i++){
    out.me |= demo_rotate_left_table[(b->me >> (8*i)) & 255] << i;
    out.opp |= demo_rotate_left_table[(b->opp >> (8*i)) & 255] << i;
  }
  return out;
}

void testing_area(){
  char buff[1024];
  std::ifstream file("xot");
  board b;
  while(!file.eof()){
    file.getline(buff,1024,'\n');
    b.reset();
    for(int i=0;i<8;i++){
      b.do_move(buff[2*i]-'a'+(8*(buff[(2*i)+1]-'1')));     
    }
    std::cout << "{0x" << std::hex << b.me << ",0x" << b.opp << "},\n"; 
    
  }
  
}
